<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mongo="http://www.springframework.org/schema/data/mongo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
            http://www.springframework.org/schema/data/mongo
             http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.0.xsd" default-init-method="init"
       default-destroy-method="destroy">

    <context:component-scan base-package="com.sy.mongo"/>

    <mvc:interceptors>
        <bean class="com.sy.mongo.filters.AccessControlAllowOriginFilter"/>
        <bean class="com.sy.mongo.filters.AccessSecurityFilter"/>
    </mvc:interceptors>


    <bean id="fastJsonConfig" class="com.alibaba.fastjson.support.config.FastJsonConfig">
        <property name="charset" value="UTF-8"/>
        <property name="serializerFeatures">
            <list>
                <value>QuoteFieldNames</value>
                <value>WriteMapNullValue</value>
            </list>
        </property>
    </bean>

    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json</value>
                    </list>
                </property>
                <property name="fastJsonConfig" ref="fastJsonConfig"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <mvc:resources mapping="/*.txt" location="/" />

    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/jsps/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties"/>
    </bean>

    <mongo:mongo host="${mongo_host}" port="${mongo_port}" />


    <!-- mongo的工厂，通过它来取得mongo实例,dbname为mongodb的数据库名，没有的话会自动创建     password="${mongo_password}" username="${mongo_username}-->
    <mongo:db-factory dbname="${mongo_dbname}" mongo-ref="mongo" />


    <bean id="mappingContext"
          class="org.springframework.data.mongodb.core.mapping.MongoMappingContext" />

    <bean id="defaultMongoTypeMapper"
          class="org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper">
        <constructor-arg name="typeKey"><null/></constructor-arg>
    </bean>

    <bean id="mappingMongoConverter"
          class="org.springframework.data.mongodb.core.convert.MappingMongoConverter">
        <constructor-arg name="mongoDbFactory" ref="mongoDbFactory" />
        <constructor-arg name="mappingContext" ref="mappingContext" />
        <property name="typeMapper" ref="defaultMongoTypeMapper" />
    </bean>


    <!-- mongodb的主要操作对象，所有对mongodb的增删改查的操作都是通过它完成 -->
    <bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
        <constructor-arg name="mongoDbFactory" ref="mongoDbFactory"/>
        <constructor-arg name="mongoConverter" ref="mappingMongoConverter"/>
    </bean>

    <!-- 映射转换器，扫描back-package目录下的文件，根据注释，把它们作为mongodb的一个collection的映射 -->
    <mongo:mapping-converter base-package="com.sy.mongo.mongoDAO.pojos" />

    <!-- mongodb bean的仓库目录，会自动扫描扩展了MongoRepository接口的接口进行注入 -->
    <mongo:repositories base-package="com.sy.mongo.mongoDAO" />




    <context:annotation-config />

    <!--<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"-->
          <!--destroy-method="close">-->
        <!--<property name="driverClassName" value="${driverClassName}"/>-->
        <!--<property name="url" value="${url}"/>-->
        <!--<property name="username" value="${username}"/>-->
        <!--<property name="password" value="${password}"/>-->
        <!--<property name="initialSize" value="5"/>-->
        <!--<property name="minIdle" value="5"/>-->
        <!--<property name="maxIdle" value="10"/>-->
        <!--<property name="maxTotal" value="30"/>-->
    <!--</bean>-->

    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
        <!--<property name="configLocation" value="classpath:mybatis-config.xml"/>-->
        <!--<property name="mapperLocations" value="classpath:mappers/*.xml"/>-->
    <!--</bean>-->


    <!--<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">-->
        <!--<constructor-arg index="0" ref="sqlSessionFactory"/>-->
    <!--</bean>-->

    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--<property name="basePackage" value="com.sy.mongo.dao"/>-->
        <!--<property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>-->
        <!--<property name="annotationClass" value="org.springframework.stereotype.Repository"/>-->
    <!--</bean>-->

    <!--<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->
    <!--<tx:annotation-driven transaction-manager="txManager"/>-->




</beans>
